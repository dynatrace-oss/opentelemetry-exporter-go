// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: dynatrace/odin/proto/trace/v1/trace.proto

package v1

import (
	v1 "dynatrace.com/odin/odin-proto/gen/go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This enum MUST stay in sync with OneAgent SubPathProtocol.proto enum CUSTOM_TAG_TYPE to
// allow direct assignment of the value received in a FW4 custom blob (see OAAD tagging).
type CustomTag_Type int32

const (
	CustomTag_Generic CustomTag_Type = 0
	CustomTag_MQ      CustomTag_Type = 1
)

// Enum value maps for CustomTag_Type.
var (
	CustomTag_Type_name = map[int32]string{
		0: "Generic",
		1: "MQ",
	}
	CustomTag_Type_value = map[string]int32{
		"Generic": 0,
		"MQ":      1,
	}
)

func (x CustomTag_Type) Enum() *CustomTag_Type {
	p := new(CustomTag_Type)
	*p = x
	return p
}

func (x CustomTag_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTag_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[0].Descriptor()
}

func (CustomTag_Type) Type() protoreflect.EnumType {
	return &file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[0]
}

func (x CustomTag_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomTag_Type.Descriptor instead.
func (CustomTag_Type) EnumDescriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{0, 0}
}

type CustomTag_Direction int32

const (
	CustomTag_InvalidDirection CustomTag_Direction = 0
	CustomTag_Incoming         CustomTag_Direction = 1
	CustomTag_Outgoing         CustomTag_Direction = 2
)

// Enum value maps for CustomTag_Direction.
var (
	CustomTag_Direction_name = map[int32]string{
		0: "InvalidDirection",
		1: "Incoming",
		2: "Outgoing",
	}
	CustomTag_Direction_value = map[string]int32{
		"InvalidDirection": 0,
		"Incoming":         1,
		"Outgoing":         2,
	}
)

func (x CustomTag_Direction) Enum() *CustomTag_Direction {
	p := new(CustomTag_Direction)
	*p = x
	return p
}

func (x CustomTag_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTag_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[1].Descriptor()
}

func (CustomTag_Direction) Type() protoreflect.EnumType {
	return &file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[1]
}

func (x CustomTag_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomTag_Direction.Descriptor instead.
func (CustomTag_Direction) EnumDescriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{0, 1}
}

// SpanKind is the type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
type Span_SpanKind int32

const (
	// Unspecified. Do NOT use as default.
	// Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
	Span_SPAN_KIND_UNSPECIFIED Span_SpanKind = 0
	// Indicates that the span represents an internal operation within an application,
	// as opposed to an operations happening at the boundaries. Default value.
	Span_INTERNAL Span_SpanKind = 1
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	Span_SERVER Span_SpanKind = 2
	// Indicates that the span describes a request to some remote service.
	Span_CLIENT Span_SpanKind = 3
	// Indicates that the span describes a producer sending a message to a broker.
	// Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
	// between producer and consumer spans. A PRODUCER span ends when the message was accepted
	// by the broker while the logical processing of the message might span a much longer time.
	Span_PRODUCER Span_SpanKind = 4
	// Indicates that the span describes consumer receiving a message from a broker.
	// Like the PRODUCER kind, there is often no direct critical path latency relationship
	// between producer and consumer spans.
	Span_CONSUMER Span_SpanKind = 5
)

// Enum value maps for Span_SpanKind.
var (
	Span_SpanKind_name = map[int32]string{
		0: "SPAN_KIND_UNSPECIFIED",
		1: "INTERNAL",
		2: "SERVER",
		3: "CLIENT",
		4: "PRODUCER",
		5: "CONSUMER",
	}
	Span_SpanKind_value = map[string]int32{
		"SPAN_KIND_UNSPECIFIED": 0,
		"INTERNAL":              1,
		"SERVER":                2,
		"CLIENT":                3,
		"PRODUCER":              4,
		"CONSUMER":              5,
	}
)

func (x Span_SpanKind) Enum() *Span_SpanKind {
	p := new(Span_SpanKind)
	*p = x
	return p
}

func (x Span_SpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span_SpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[2].Descriptor()
}

func (Span_SpanKind) Type() protoreflect.EnumType {
	return &file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[2]
}

func (x Span_SpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span_SpanKind.Descriptor instead.
func (Span_SpanKind) EnumDescriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{1, 0}
}

type Span_SendReason int32

const (
	// The span has ended.
	// The full data is sent.
	// No further messages will be sent for this span.
	Span_Ended Span_SendReason = 0
	// The span is new or has changed since sending it the last time.
	// The full data is sent.
	// Check for `update_sequence_no == 0` to determine whether the span is new.
	Span_NewOrChanged Span_SendReason = 1
	// The span was already sent at least once with another reason and has not
	// ended yet. However, the agent believes that the span is still alive and
	// running.
	// Only the trace + span ID are sent (not even fields that are
	// otherwise "semantically required" are sent).
	Span_KeepAlive Span_SendReason = 2
	// OPTIONAL CAPABILITY:
	// Agents or servers are not required to send/handle messages of this type.
	// The span is to be considered dropped.
	// Only the trace + span ID and last_propagate_time_unixnano are sent (not
	// even fields that are otherwise "semantically required" are sent).
	// No further messages will be sent for this span.
	Span_Dropped Span_SendReason = 3
)

// Enum value maps for Span_SendReason.
var (
	Span_SendReason_name = map[int32]string{
		0: "Ended",
		1: "NewOrChanged",
		2: "KeepAlive",
		3: "Dropped",
	}
	Span_SendReason_value = map[string]int32{
		"Ended":        0,
		"NewOrChanged": 1,
		"KeepAlive":    2,
		"Dropped":      3,
	}
)

func (x Span_SendReason) Enum() *Span_SendReason {
	p := new(Span_SendReason)
	*p = x
	return p
}

func (x Span_SendReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Span_SendReason) Descriptor() protoreflect.EnumDescriptor {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[3].Descriptor()
}

func (Span_SendReason) Type() protoreflect.EnumType {
	return &file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[3]
}

func (x Span_SendReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Span_SendReason.Descriptor instead.
func (Span_SendReason) EnumDescriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{1, 1}
}

// StatusCode mirrors the codes defined at
// https://github.com/open-telemetry/opentelemetry-specification/blob/v0.6.0/specification/trace/api.md#statuscanonicalcode
type Status_StatusCode int32

const (
	Status_Ok                 Status_StatusCode = 0 // Corresponds to new codes OK, UNSET.
	Status_Cancelled          Status_StatusCode = 1
	Status_UnknownError       Status_StatusCode = 2 // Corresponds to new code ERROR.
	Status_InvalidArgument    Status_StatusCode = 3
	Status_DeadlineExceeded   Status_StatusCode = 4
	Status_NotFound           Status_StatusCode = 5
	Status_AlreadyExists      Status_StatusCode = 6
	Status_PermissionDenied   Status_StatusCode = 7
	Status_ResourceExhausted  Status_StatusCode = 8
	Status_FailedPrecondition Status_StatusCode = 9
	Status_Aborted            Status_StatusCode = 10
	Status_OutOfRange         Status_StatusCode = 11
	Status_Unimplemented      Status_StatusCode = 12
	Status_InternalError      Status_StatusCode = 13
	Status_Unavailable        Status_StatusCode = 14
	Status_DataLoss           Status_StatusCode = 15
	Status_Unauthenticated    Status_StatusCode = 16
)

// Enum value maps for Status_StatusCode.
var (
	Status_StatusCode_name = map[int32]string{
		0:  "Ok",
		1:  "Cancelled",
		2:  "UnknownError",
		3:  "InvalidArgument",
		4:  "DeadlineExceeded",
		5:  "NotFound",
		6:  "AlreadyExists",
		7:  "PermissionDenied",
		8:  "ResourceExhausted",
		9:  "FailedPrecondition",
		10: "Aborted",
		11: "OutOfRange",
		12: "Unimplemented",
		13: "InternalError",
		14: "Unavailable",
		15: "DataLoss",
		16: "Unauthenticated",
	}
	Status_StatusCode_value = map[string]int32{
		"Ok":                 0,
		"Cancelled":          1,
		"UnknownError":       2,
		"InvalidArgument":    3,
		"DeadlineExceeded":   4,
		"NotFound":           5,
		"AlreadyExists":      6,
		"PermissionDenied":   7,
		"ResourceExhausted":  8,
		"FailedPrecondition": 9,
		"Aborted":            10,
		"OutOfRange":         11,
		"Unimplemented":      12,
		"InternalError":      13,
		"Unavailable":        14,
		"DataLoss":           15,
		"Unauthenticated":    16,
	}
)

func (x Status_StatusCode) Enum() *Status_StatusCode {
	p := new(Status_StatusCode)
	*p = x
	return p
}

func (x Status_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[4].Descriptor()
}

func (Status_StatusCode) Type() protoreflect.EnumType {
	return &file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes[4]
}

func (x Status_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_StatusCode.Descriptor instead.
func (Status_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{2, 0}
}

// Specifies a custom tag.
type CustomTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the custom tag.
	Type CustomTag_Type `protobuf:"varint,1,opt,name=type,proto3,enum=dynatrace.odin.proto.trace.v1.CustomTag_Type" json:"type,omitempty"`
	// The direction where the custom tag has been seen.
	Direction CustomTag_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=dynatrace.odin.proto.trace.v1.CustomTag_Direction" json:"direction,omitempty"`
	// The custom tag value.
	TagValue []byte `protobuf:"bytes,3,opt,name=tagValue,proto3" json:"tagValue,omitempty"`
}

func (x *CustomTag) Reset() {
	*x = CustomTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTag) ProtoMessage() {}

func (x *CustomTag) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTag.ProtoReflect.Descriptor instead.
func (*CustomTag) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{0}
}

func (x *CustomTag) GetType() CustomTag_Type {
	if x != nil {
		return x.Type
	}
	return CustomTag_Generic
}

func (x *CustomTag) GetDirection() CustomTag_Direction {
	if x != nil {
		return x.Direction
	}
	return CustomTag_InvalidDirection
}

func (x *CustomTag) GetTagValue() []byte {
	if x != nil {
		return x.TagValue
	}
	return nil
}

// Span represents a single operation within a trace. Spans can be
// nested to form a trace tree. Spans may also be linked to other spans
// from the same or different trace and form graphs. Often, a trace
// contains a root span that describes the end-to-end latency, and one
// or more subspans for its sub-operations. A trace can also contain
// multiple root spans, or none at all. Spans do not need to be
// contiguous - there may be gaps or overlaps between spans in a trace.
//
// The next available field id is 17.
type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for a trace. All spans from the same trace share
	// the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
	// is considered invalid.
	//
	// This field is semantically required. Receiver should generate new
	// random trace_id if empty or invalid trace_id was received.
	//
	// This field is required.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// A unique identifier for a span within a trace, assigned when the span
	// is created. The ID is an 8-byte array. An ID with all zeroes is considered
	// invalid.
	//
	// This field is semantically required. Receiver should generate new
	// random span_id if empty or invalid span_id was received.
	//
	// This field is required.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// DYNATRACE-specific: The tracestate SHOULD NOT be exported to the server.
	// If a trace state is sent, it MUST ONLY be used for
	// debugging purposes by the receiver.
	// END DYNATRACE-specific.
	//
	// tracestate conveys information about request position in multiple distributed tracing graphs.
	// It is a tracestate in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
	// See also https://github.com/w3c/distributed-tracing for more details about this field.
	Tracestate string `protobuf:"bytes,3,opt,name=tracestate,proto3" json:"tracestate,omitempty"`
	// The `span_id` of this span's parent span. If this is a root span, then this
	// field must be empty. The ID is an 8-byte array.
	ParentSpanId []byte `protobuf:"bytes,4,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	// A description of the span's operation.
	//
	// For example, the name can be a qualified method name or a file name
	// and a line number where the operation is called. A best practice is to use
	// the same display name at the same call point in an application.
	// This makes it easier to correlate spans in different traces.
	//
	// This field is semantically required to be set to non-empty string.
	// When null or empty string received - receiver may use string "name"
	// as a replacement. There might be smarted algorithms implemented by
	// receiver to fix the empty span name.
	//
	// This field is required.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Distinguishes between spans generated in a particular context. For example,
	// two spans with the same name may be distinguished using `CLIENT` (caller)
	// and `SERVER` (callee) to identify queueing latency associated with the span.
	Kind Span_SpanKind `protobuf:"varint,6,opt,name=kind,proto3,enum=dynatrace.odin.proto.trace.v1.Span_SpanKind" json:"kind,omitempty"`
	// start_time_unixnano is the start time of the span. On the client side, this is the time
	// kept by the local machine where the span execution starts. On the server side, this
	// is the time when the server's application handler starts running.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// This field is semantically required and it is expected that end_time >= start_time.
	StartTimeUnixnano uint64 `protobuf:"fixed64,7,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// end_time_unixnano is the end time of the span. On the client side, this is the time
	// kept by the local machine where the span execution ends. On the server side, this
	// is the time when the server application handler stops running.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// This field MUST be set if and only if the span has actually ended. It is expected
	// that end_time_unixnano >= start_time_unixnano.
	EndTimeUnixnano uint64 `protobuf:"fixed64,8,opt,name=end_time_unixnano,json=endTimeUnixnano,proto3" json:"end_time_unixnano,omitempty"`
	// attributes is a collection of key/value pairs. The value can be a string,
	// an integer, a double or the Boolean values `true` or `false`. Note, global attributes
	// like server name can be set using the resource API. Examples of attributes:
	//
	//     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
	//     "/http/server_latency": 300
	//     "abc.com/myattribute": true
	//     "abc.com/score": 10.239
	Attributes []*v1.AttributeKeyValue `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of attributes that were discarded. Attributes
	// can be discarded because their keys are too long or because there are too many
	// attributes. If this value is 0, then no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,10,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	// events is a collection of Event items.
	Events []*Span_Event `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty"`
	// dropped_events_count is the number of dropped events. If the value is 0, then no
	// events were dropped.
	DroppedEventsCount uint32 `protobuf:"varint,12,opt,name=dropped_events_count,json=droppedEventsCount,proto3" json:"dropped_events_count,omitempty"`
	// links is a collection of Links, which are references from this span to a span
	// in the same or different trace.
	Links []*Span_Link `protobuf:"bytes,13,rep,name=links,proto3" json:"links,omitempty"`
	// dropped_links_count is the number of dropped links after the maximum size was
	// enforced. If this value is 0, then no links were dropped.
	DroppedLinksCount uint32 `protobuf:"varint,14,opt,name=dropped_links_count,json=droppedLinksCount,proto3" json:"dropped_links_count,omitempty"`
	// The final status for this span.
	// Optional field: If this is missing, it is equivalent to
	// a new-style status with no message and code UNSET,
	// or an old-style status with no message and code Ok.
	Status *Status `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// The reason a message was sent for this span.
	// This field is semantically required.
	SendReason Span_SendReason `protobuf:"varint,32,opt,name=send_reason,json=sendReason,proto3,enum=dynatrace.odin.proto.trace.v1.Span_SendReason" json:"send_reason,omitempty"`
	// The sequence number of the message sent for this span.
	// Starts at zero for each new span and increases by one for every message
	// sent for it.
	// This field is semantically required.
	UpdateSequenceNo int32 `protobuf:"varint,33,opt,name=update_sequence_no,json=updateSequenceNo,proto3" json:"update_sequence_no,omitempty"`
	// The last time this span potentially became a parent, i.e.,
	// the last time this span's context has been injected into some carrier
	// or used as a parent.
	// Note that while this field uses nanosecond resolution for consistency with
	// other timestamp fields, implementations may use a timer that is
	// only accurate to the second here.
	// This can be used as a guide on how long the backend should wait for additional
	// children of this span before finalizing the trace.
	// Zero means that the span has not been propagated (so far).
	LastPropagateTimeUnixnano uint64 `protobuf:"fixed64,34,opt,name=last_propagate_time_unixnano,json=lastPropagateTimeUnixnano,proto3" json:"last_propagate_time_unixnano,omitempty"`
	// The ID is an 8-byte array.
	// tenant_parent_span_id always represents the nearest parent_span_id from the current tenant.
	// It MUST NOT be set when there is no FW tag and we only have the traceparent.
	// It MUST be set to the parent span id of the current tenant according to the FW tag if we have an FW tag.
	// For spans with local parents within an ODIN agent, parent_span_id and tenant_parent_span_id
	// MUST be equal and set to the span id of that local parent.
	// Note: This will often be equal to parent_span_id, but may be different
	// if the trace passes through systems that belong to a different tenant
	// or are monitored by a different W3C Trace Context-enabled system.
	TenantParentSpanId []byte `protobuf:"bytes,35,opt,name=tenant_parent_span_id,json=tenantParentSpanId,proto3" json:"tenant_parent_span_id,omitempty"`
	// Complete mobile RUM MT tag string
	// https://oaad.lab.dynatrace.org/shortlink/id-coreconcepts-purepath-tagging#mobile-tags-mt
	// Must be set on spans with empty tenant_parent_span_id only, as an incoming
	// mobile tag defines the starting point of the server-side trace.
	// Note: a parent_span_id may be present because of some W3C tracecontext aware component
	// without dynatrace agent included located in front of the ODIN agent.
	MobileTag string `protobuf:"bytes,36,opt,name=mobile_tag,json=mobileTag,proto3" json:"mobile_tag,omitempty"`
	// Custom tag
	// Incoming custom tags must be set on root spans only (empty parent_span_id), as an incoming
	// custom tag defines the starting point of a server side trace.
	// Outgoing custom tags must be set on the span which represents the operation sending
	// a custom tagged message.
	CustomTag *CustomTag `protobuf:"bytes,37,opt,name=custom_tag,json=customTag,proto3" json:"custom_tag,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{1}
}

func (x *Span) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Span) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *Span) GetTracestate() string {
	if x != nil {
		return x.Tracestate
	}
	return ""
}

func (x *Span) GetParentSpanId() []byte {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *Span) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span) GetKind() Span_SpanKind {
	if x != nil {
		return x.Kind
	}
	return Span_SPAN_KIND_UNSPECIFIED
}

func (x *Span) GetStartTimeUnixnano() uint64 {
	if x != nil {
		return x.StartTimeUnixnano
	}
	return 0
}

func (x *Span) GetEndTimeUnixnano() uint64 {
	if x != nil {
		return x.EndTimeUnixnano
	}
	return 0
}

func (x *Span) GetAttributes() []*v1.AttributeKeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

func (x *Span) GetEvents() []*Span_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Span) GetDroppedEventsCount() uint32 {
	if x != nil {
		return x.DroppedEventsCount
	}
	return 0
}

func (x *Span) GetLinks() []*Span_Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Span) GetDroppedLinksCount() uint32 {
	if x != nil {
		return x.DroppedLinksCount
	}
	return 0
}

func (x *Span) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Span) GetSendReason() Span_SendReason {
	if x != nil {
		return x.SendReason
	}
	return Span_Ended
}

func (x *Span) GetUpdateSequenceNo() int32 {
	if x != nil {
		return x.UpdateSequenceNo
	}
	return 0
}

func (x *Span) GetLastPropagateTimeUnixnano() uint64 {
	if x != nil {
		return x.LastPropagateTimeUnixnano
	}
	return 0
}

func (x *Span) GetTenantParentSpanId() []byte {
	if x != nil {
		return x.TenantParentSpanId
	}
	return nil
}

func (x *Span) GetMobileTag() string {
	if x != nil {
		return x.MobileTag
	}
	return ""
}

func (x *Span) GetCustomTag() *CustomTag {
	if x != nil {
		return x.CustomTag
	}
	return nil
}

// The Status type defines a logical error model that is suitable for different
// programming environments, including REST APIs and RPC APIs.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The old-style status code.
	//
	// This currently holds a gRPC-like status code enum.
	// Senders which use the updated OpenTelemetry status code in their API/data model
	// MUST use the following mapping to a gRPC-like status code:
	//
	//     UNSET -> Ok
	//     OK    -> Ok
	//     ERROR -> UnknownError
	//
	// Consumers SHOULD NOT use the code field for now.
	//
	// See <https://github.com/open-telemetry/opentelemetry-proto/pull/224>
	Code Status_StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=dynatrace.odin.proto.trace.v1.Status_StatusCode" json:"code,omitempty"`
	// An optional developer-facing human-readable error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetCode() Status_StatusCode {
	if x != nil {
		return x.Code
	}
	return Status_Ok
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Event is a time-stamped annotation of the span, consisting of user-supplied
// text description and key-value pairs.
type Span_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time_unixnano is the time the event occurred.
	TimeUnixnano uint64 `protobuf:"fixed64,1,opt,name=time_unixnano,json=timeUnixnano,proto3" json:"time_unixnano,omitempty"`
	// name of the event.
	// This field is semantically required to be set to non-empty string.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// attributes is a collection of attribute key/value pairs on the event.
	Attributes []*v1.AttributeKeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of dropped attributes. If the value is 0,
	// then no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,4,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
}

func (x *Span_Event) Reset() {
	*x = Span_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Event) ProtoMessage() {}

func (x *Span_Event) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Event.ProtoReflect.Descriptor instead.
func (*Span_Event) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Span_Event) GetTimeUnixnano() uint64 {
	if x != nil {
		return x.TimeUnixnano
	}
	return 0
}

func (x *Span_Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Span_Event) GetAttributes() []*v1.AttributeKeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span_Event) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

// A pointer from the current span to another span in the same trace or in a
// different trace. For example, this can be used in batching operations,
// where a single batch handler processes multiple requests from different
// traces or when the handler receives a request from a different project.
type Span_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier of a trace that this linked span is part of. The ID is a
	// 16-byte array.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// A unique identifier for the linked span. The ID is an 8-byte array.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// The tracestate associated with the link.
	Tracestate string `protobuf:"bytes,3,opt,name=tracestate,proto3" json:"tracestate,omitempty"`
	// attributes is a collection of attribute key/value pairs on the link.
	Attributes []*v1.AttributeKeyValue `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// dropped_attributes_count is the number of dropped attributes. If the value is 0,
	// then no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,5,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
}

func (x *Span_Link) Reset() {
	*x = Span_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span_Link) ProtoMessage() {}

func (x *Span_Link) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span_Link.ProtoReflect.Descriptor instead.
func (*Span_Link) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Span_Link) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Span_Link) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *Span_Link) GetTracestate() string {
	if x != nil {
		return x.Tracestate
	}
	return ""
}

func (x *Span_Link) GetAttributes() []*v1.AttributeKeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Span_Link) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

var File_dynatrace_odin_proto_trace_v1_trace_proto protoreflect.FileDescriptor

var file_dynatrace_odin_proto_trace_v1_trace_proto_rawDesc = []byte{
	0x0a, 0x29, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x64, 0x79, 0x6e,
	0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2b, 0x64, 0x79, 0x6e, 0x61,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x09, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x61, 0x67, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x61, 0x67, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4d,
	0x51, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x22, 0xa8, 0x0d, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61,
	0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x51, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x06, 0x52, 0x19, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x61, 0x67, 0x1a, 0xcd, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61,
	0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x79, 0x6e,
	0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0xe7, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x51, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a,
	0x08, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x41,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x10, 0x05, 0x22, 0x45, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x03, 0x22, 0xa8, 0x03,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78,
	0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x10,
	0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x73,
	0x73, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x10, 0x42, 0x60, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x64, 0x79, 0x6e,
	0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x64, 0x69, 0x6e, 0x2f,
	0x6f, 0x64, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescOnce sync.Once
	file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescData = file_dynatrace_odin_proto_trace_v1_trace_proto_rawDesc
)

func file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescGZIP() []byte {
	file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescOnce.Do(func() {
		file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescData)
	})
	return file_dynatrace_odin_proto_trace_v1_trace_proto_rawDescData
}

var file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_dynatrace_odin_proto_trace_v1_trace_proto_goTypes = []interface{}{
	(CustomTag_Type)(0),          // 0: dynatrace.odin.proto.trace.v1.CustomTag.Type
	(CustomTag_Direction)(0),     // 1: dynatrace.odin.proto.trace.v1.CustomTag.Direction
	(Span_SpanKind)(0),           // 2: dynatrace.odin.proto.trace.v1.Span.SpanKind
	(Span_SendReason)(0),         // 3: dynatrace.odin.proto.trace.v1.Span.SendReason
	(Status_StatusCode)(0),       // 4: dynatrace.odin.proto.trace.v1.Status.StatusCode
	(*CustomTag)(nil),            // 5: dynatrace.odin.proto.trace.v1.CustomTag
	(*Span)(nil),                 // 6: dynatrace.odin.proto.trace.v1.Span
	(*Status)(nil),               // 7: dynatrace.odin.proto.trace.v1.Status
	(*Span_Event)(nil),           // 8: dynatrace.odin.proto.trace.v1.Span.Event
	(*Span_Link)(nil),            // 9: dynatrace.odin.proto.trace.v1.Span.Link
	(*v1.AttributeKeyValue)(nil), // 10: dynatrace.odin.proto.common.v1.AttributeKeyValue
}
var file_dynatrace_odin_proto_trace_v1_trace_proto_depIdxs = []int32{
	0,  // 0: dynatrace.odin.proto.trace.v1.CustomTag.type:type_name -> dynatrace.odin.proto.trace.v1.CustomTag.Type
	1,  // 1: dynatrace.odin.proto.trace.v1.CustomTag.direction:type_name -> dynatrace.odin.proto.trace.v1.CustomTag.Direction
	2,  // 2: dynatrace.odin.proto.trace.v1.Span.kind:type_name -> dynatrace.odin.proto.trace.v1.Span.SpanKind
	10, // 3: dynatrace.odin.proto.trace.v1.Span.attributes:type_name -> dynatrace.odin.proto.common.v1.AttributeKeyValue
	8,  // 4: dynatrace.odin.proto.trace.v1.Span.events:type_name -> dynatrace.odin.proto.trace.v1.Span.Event
	9,  // 5: dynatrace.odin.proto.trace.v1.Span.links:type_name -> dynatrace.odin.proto.trace.v1.Span.Link
	7,  // 6: dynatrace.odin.proto.trace.v1.Span.status:type_name -> dynatrace.odin.proto.trace.v1.Status
	3,  // 7: dynatrace.odin.proto.trace.v1.Span.send_reason:type_name -> dynatrace.odin.proto.trace.v1.Span.SendReason
	5,  // 8: dynatrace.odin.proto.trace.v1.Span.custom_tag:type_name -> dynatrace.odin.proto.trace.v1.CustomTag
	4,  // 9: dynatrace.odin.proto.trace.v1.Status.code:type_name -> dynatrace.odin.proto.trace.v1.Status.StatusCode
	10, // 10: dynatrace.odin.proto.trace.v1.Span.Event.attributes:type_name -> dynatrace.odin.proto.common.v1.AttributeKeyValue
	10, // 11: dynatrace.odin.proto.trace.v1.Span.Link.attributes:type_name -> dynatrace.odin.proto.common.v1.AttributeKeyValue
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_dynatrace_odin_proto_trace_v1_trace_proto_init() }
func file_dynatrace_odin_proto_trace_v1_trace_proto_init() {
	if File_dynatrace_odin_proto_trace_v1_trace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dynatrace_odin_proto_trace_v1_trace_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dynatrace_odin_proto_trace_v1_trace_proto_goTypes,
		DependencyIndexes: file_dynatrace_odin_proto_trace_v1_trace_proto_depIdxs,
		EnumInfos:         file_dynatrace_odin_proto_trace_v1_trace_proto_enumTypes,
		MessageInfos:      file_dynatrace_odin_proto_trace_v1_trace_proto_msgTypes,
	}.Build()
	File_dynatrace_odin_proto_trace_v1_trace_proto = out.File
	file_dynatrace_odin_proto_trace_v1_trace_proto_rawDesc = nil
	file_dynatrace_odin_proto_trace_v1_trace_proto_goTypes = nil
	file_dynatrace_odin_proto_trace_v1_trace_proto_depIdxs = nil
}
