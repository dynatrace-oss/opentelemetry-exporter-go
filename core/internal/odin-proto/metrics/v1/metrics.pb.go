// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.10.0
// source: dynatrace/odin/proto/metrics/v1/metrics.proto

package v1

import (
	v1 "github.com/dynatrace-oss/opentelemetry-exporter-go/core/internal/odin-proto/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the metric. It describes how the data is reported.
//
// A gauge is an instantaneous measurement of a value.
//
// A counter/cumulative measurement is a value accumulated over a time
// interval. In a time series, cumulative measurements should have the same
// start time, increasing values, until an event resets the cumulative value
// to zero and sets a new start time for the subsequent points.
type MetricDescriptor_Type int32

const (
	// Do not use this default value.
	MetricDescriptor_UNSPECIFIED MetricDescriptor_Type = 0
	// Integer gauge. The value can go both up and down over time.
	// Corresponding values are stored in Int64DataPoint.
	MetricDescriptor_GAUGE_INT64 MetricDescriptor_Type = 1
	// Floating point gauge. The value can go both up and down over time.
	// Corresponding values are stored in DoubleDataPoint.
	MetricDescriptor_GAUGE_DOUBLE MetricDescriptor_Type = 2
	// Histogram gauge measurement.
	// Used in scenarios like a snapshot of time that current items in a queue
	// have spent there.
	// Corresponding values are stored in HistogramDataPoint. The count and sum of the
	// histogram can go both up and down over time. Recorded values are always >= 0.
	MetricDescriptor_GAUGE_HISTOGRAM MetricDescriptor_Type = 3
	// Integer counter measurement. The value cannot decrease; if value is reset then
	// CounterInt64Value.start_time_unixnano should also be reset.
	// Corresponding values are stored in Int64DataPoint.
	MetricDescriptor_COUNTER_INT64 MetricDescriptor_Type = 4
	// Floating point counter measurement. The value cannot decrease, if
	// resets then the CounterDoubleValue.start_time_unixnano should also be reset.
	// Recorded values are always >= 0.
	// Corresponding values are stored in DoubleDataPoint.
	MetricDescriptor_COUNTER_DOUBLE MetricDescriptor_Type = 5
	// Histogram cumulative measurement.
	// Corresponding values are stored in HistogramDataPoint. The count and sum of the
	// histogram cannot decrease; if values are reset then HistogramValue.start_time_unixnano
	// should also be reset to the new start timestamp.
	MetricDescriptor_CUMULATIVE_HISTOGRAM MetricDescriptor_Type = 6
	// Summary value. Some frameworks implemented Histograms as a summary of observations
	// (usually things like request durations and response sizes). While it
	// also provides a total count of observations and a sum of all observed
	// values, it calculates configurable percentiles over a sliding time
	// window.
	// Corresponding values are stored in SummaryDataPoint.
	MetricDescriptor_SUMMARY MetricDescriptor_Type = 7
)

// Enum value maps for MetricDescriptor_Type.
var (
	MetricDescriptor_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "GAUGE_INT64",
		2: "GAUGE_DOUBLE",
		3: "GAUGE_HISTOGRAM",
		4: "COUNTER_INT64",
		5: "COUNTER_DOUBLE",
		6: "CUMULATIVE_HISTOGRAM",
		7: "SUMMARY",
	}
	MetricDescriptor_Type_value = map[string]int32{
		"UNSPECIFIED":          0,
		"GAUGE_INT64":          1,
		"GAUGE_DOUBLE":         2,
		"GAUGE_HISTOGRAM":      3,
		"COUNTER_INT64":        4,
		"COUNTER_DOUBLE":       5,
		"CUMULATIVE_HISTOGRAM": 6,
		"SUMMARY":              7,
	}
)

func (x MetricDescriptor_Type) Enum() *MetricDescriptor_Type {
	p := new(MetricDescriptor_Type)
	*p = x
	return p
}

func (x MetricDescriptor_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricDescriptor_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_enumTypes[0].Descriptor()
}

func (MetricDescriptor_Type) Type() protoreflect.EnumType {
	return &file_dynatrace_odin_proto_metrics_v1_metrics_proto_enumTypes[0]
}

func (x MetricDescriptor_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricDescriptor_Type.Descriptor instead.
func (MetricDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{1, 0}
}

// Defines a Metric which has one or more timeseries.
//
// The data model and relation between entities is shown in the diagram below.
//
// - Metric is composed of a MetricDescriptor and a list of data points.
// - MetricDescriptor contains a list of label keys (shown horizontally).
// - Data is a list of DataPoints (shown vertically).
// - DataPoint contains a list of label values and a value.
//
//     Metric
//  +----------+         +------------------------+
//  |descriptor|-------->| MetricDescriptor       |
//  |          |         |+-----+-----+   +-----+ |
//  |          |         ||label|label|...|label| |
//  |      data|--+      ||key1 |key2 |   |keyN | |
//  +----------+  |      |+-----+-----+   +-----+ |
//                |      +------------------------+
//                |
//                |      +---------------------------+
//                |      |DataPoint 1                |
//                v      |+------+------+   +------+ |
//             +-----+   ||label |label |...|label | |
//             |  1  |-->||value1|value2|...|valueN| |
//             +-----+   |+------+------+   +------+ |
//             |  .  |   |+-----+                    |
//             |  .  |   ||value|                    |
//             |  .  |   |+-----+                    |
//             |  .  |   +---------------------------+
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |                   .
//             |  .  |   +---------------------------+
//             |  .  |   |DataPoint M                |
//             +-----+   |+------+------+   +------+ |
//             |  M  |-->||label |label |...|label | |
//             +-----+   ||value1|value2|...|valueN| |
//                       |+------+------+   +------+ |
//                       |+-----+                    |
//                       ||value|                    |
//                       |+-----+                    |
//                       +---------------------------+
//
//-----------------------------------------------------------------------
// DataPoint is a value of specific type corresponding to a given moment in
// time. Each DataPoint is timestamped.
//
// DataPoint is strongly typed: each DataPoint type has a specific Protobuf message
// depending on the value type of the metric and thus there are currently 4 DataPoint
// messages, which correspond to the types of metric values.
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric_descriptor describes the Metric.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// Data is a list of one or more DataPoints for a single metric. Only one of the
	// following fields is used for the data, depending on the type of the metric defined
	// by MetricDescriptor.type field.
	Int64Datapoints     []*Int64DataPoint     `protobuf:"bytes,2,rep,name=int64_datapoints,json=int64Datapoints,proto3" json:"int64_datapoints,omitempty"`
	DoubleDatapoints    []*DoubleDataPoint    `protobuf:"bytes,3,rep,name=double_datapoints,json=doubleDatapoints,proto3" json:"double_datapoints,omitempty"`
	HistogramDatapoints []*HistogramDataPoint `protobuf:"bytes,4,rep,name=histogram_datapoints,json=histogramDatapoints,proto3" json:"histogram_datapoints,omitempty"`
	SummaryDatapoints   []*SummaryDataPoint   `protobuf:"bytes,5,rep,name=summary_datapoints,json=summaryDatapoints,proto3" json:"summary_datapoints,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetMetricDescriptor() *MetricDescriptor {
	if x != nil {
		return x.MetricDescriptor
	}
	return nil
}

func (x *Metric) GetInt64Datapoints() []*Int64DataPoint {
	if x != nil {
		return x.Int64Datapoints
	}
	return nil
}

func (x *Metric) GetDoubleDatapoints() []*DoubleDataPoint {
	if x != nil {
		return x.DoubleDatapoints
	}
	return nil
}

func (x *Metric) GetHistogramDatapoints() []*HistogramDataPoint {
	if x != nil {
		return x.HistogramDatapoints
	}
	return nil
}

func (x *Metric) GetSummaryDatapoints() []*SummaryDataPoint {
	if x != nil {
		return x.SummaryDatapoints
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the metric, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string                `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Type MetricDescriptor_Type `protobuf:"varint,4,opt,name=type,proto3,enum=dynatrace.odin.proto.metrics.v1.MetricDescriptor_Type" json:"type,omitempty"`
	// The label keys associated with the metric descriptor. Keys in this list must
	// be unique.
	LabelKeys []string `protobuf:"bytes,5,rep,name=label_keys,json=labelKeys,proto3" json:"label_keys,omitempty"`
}

func (x *MetricDescriptor) Reset() {
	*x = MetricDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDescriptor) ProtoMessage() {}

func (x *MetricDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDescriptor.ProtoReflect.Descriptor instead.
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *MetricDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricDescriptor) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MetricDescriptor) GetType() MetricDescriptor_Type {
	if x != nil {
		return x.Type
	}
	return MetricDescriptor_UNSPECIFIED
}

func (x *MetricDescriptor) GetLabelKeys() []string {
	if x != nil {
		return x.LabelKeys
	}
	return nil
}

// Int64DataPoint is a single data point in a timeseries that describes the time-varying
// values of a int64 metric.
type Int64DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of label values that uniquely identify this timeseries. The order of label
	// values must match that of label keys in the metric descriptor. Each element in this
	// array is the value of the key defined at the corresponding index of
	// MetricDescriptor.label_keys array. The number of elements in this array and
	// MetricDescriptor.label_keys array must be the same.
	LabelValues []string `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The value of data point.
	Value *Int64Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Int64DataPoint) Reset() {
	*x = Int64DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64DataPoint) ProtoMessage() {}

func (x *Int64DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64DataPoint.ProtoReflect.Descriptor instead.
func (*Int64DataPoint) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *Int64DataPoint) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *Int64DataPoint) GetValue() *Int64Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// DoubleDataPoint is a single data point in a timeseries that describes the time-varying
// value of a double metric.
type DoubleDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of label values that uniquely identify this timeseries. The order of label
	// values must match that of label keys in the metric descriptor. Each element in this
	// array is the value of the key defined at the corresponding index of
	// MetricDescriptor.label_keys array. The number of elements in this array and
	// MetricDescriptor.label_keys array must be the same.
	LabelValues []string `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The value of data point.
	Value *DoubleValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleDataPoint) Reset() {
	*x = DoubleDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleDataPoint) ProtoMessage() {}

func (x *DoubleDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleDataPoint.ProtoReflect.Descriptor instead.
func (*DoubleDataPoint) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *DoubleDataPoint) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *DoubleDataPoint) GetValue() *DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// HistogramDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Histogram.
type HistogramDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of label values that uniquely identify this timeseries. The order of label
	// values must match that of label keys in the metric descriptor. Each element in this
	// array is the value of the key defined at the corresponding index of
	// MetricDescriptor.label_keys array. The number of elements in this array and
	// MetricDescriptor.label_keys array must be the same.
	LabelValues []string `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The value of data point.
	Value *HistogramValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// explicit_bounds is the only supported bucket option currently.
	ExplicitBounds *HistogramDataPoint_ExplicitBounds `protobuf:"bytes,3,opt,name=explicit_bounds,json=explicitBounds,proto3" json:"explicit_bounds,omitempty"`
}

func (x *HistogramDataPoint) Reset() {
	*x = HistogramDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramDataPoint) ProtoMessage() {}

func (x *HistogramDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramDataPoint.ProtoReflect.Descriptor instead.
func (*HistogramDataPoint) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *HistogramDataPoint) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *HistogramDataPoint) GetValue() *HistogramValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HistogramDataPoint) GetExplicitBounds() *HistogramDataPoint_ExplicitBounds {
	if x != nil {
		return x.ExplicitBounds
	}
	return nil
}

// SummaryDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Summary metric.
type SummaryDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of label values that uniquely identify this timeseries. The order of label
	// values must match that of label keys in the metric descriptor. Each element in this
	// array is the value of the key defined at the corresponding index of
	// MetricDescriptor.label_keys array. The number of elements in this array and
	// MetricDescriptor.label_keys array must be the same.
	LabelValues []string `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The value of data point.
	Value *SummaryValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SummaryDataPoint) Reset() {
	*x = SummaryDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryDataPoint) ProtoMessage() {}

func (x *SummaryDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryDataPoint.ProtoReflect.Descriptor instead.
func (*SummaryDataPoint) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *SummaryDataPoint) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *SummaryDataPoint) GetValue() *SummaryValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Int64Value is a timestamped measurement of int64 value.
type Int64Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_time_unixnano is the time when the cumulative value was reset to zero.
	// This is used for Counter type only. For Gauge the value is not specified and
	// defaults to 0.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixnano uint64 `protobuf:"fixed64,1,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,2,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// value itself.
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Int64Value) Reset() {
	*x = Int64Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Value) ProtoMessage() {}

func (x *Int64Value) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Value.ProtoReflect.Descriptor instead.
func (*Int64Value) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *Int64Value) GetStartTimeUnixnano() uint64 {
	if x != nil {
		return x.StartTimeUnixnano
	}
	return 0
}

func (x *Int64Value) GetTimestampUnixnano() uint64 {
	if x != nil {
		return x.TimestampUnixnano
	}
	return 0
}

func (x *Int64Value) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// DoubleValue is a timestamped measurement of double value.
type DoubleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_time_unixnano is the time when the cumulative value was reset to zero.
	// This is used for Counter type only. For Gauge the value is not specified and
	// defaults to 0.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixnano uint64 `protobuf:"fixed64,1,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,2,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// value itself.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleValue) Reset() {
	*x = DoubleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValue) ProtoMessage() {}

func (x *DoubleValue) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValue.ProtoReflect.Descriptor instead.
func (*DoubleValue) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *DoubleValue) GetStartTimeUnixnano() uint64 {
	if x != nil {
		return x.StartTimeUnixnano
	}
	return 0
}

func (x *DoubleValue) GetTimestampUnixnano() uint64 {
	if x != nil {
		return x.TimestampUnixnano
	}
	return 0
}

func (x *DoubleValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// HistogramValue contains summary statistics for a population of values. It may
// optionally contain the distribution of those values across a set of buckets.
type HistogramValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_time_unixnano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	// Note: this field is always unspecified and ignored if MetricDescriptor.type==GAUGE_HISTOGRAM.
	StartTimeUnixnano uint64 `protobuf:"fixed64,1,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,2,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is
	// provided.
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	Sum float64 `protobuf:"fixed64,4,opt,name=sum,proto3" json:"sum,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the
	// count field of HistogramValue.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	//
	// Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
	// must also be present and number of elements in this field must be equal to the
	// number of buckets defined by bucket_options.
	Buckets []*HistogramValue_Bucket `protobuf:"bytes,5,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *HistogramValue) Reset() {
	*x = HistogramValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramValue) ProtoMessage() {}

func (x *HistogramValue) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramValue.ProtoReflect.Descriptor instead.
func (*HistogramValue) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{8}
}

func (x *HistogramValue) GetStartTimeUnixnano() uint64 {
	if x != nil {
		return x.StartTimeUnixnano
	}
	return 0
}

func (x *HistogramValue) GetTimestampUnixnano() uint64 {
	if x != nil {
		return x.TimestampUnixnano
	}
	return 0
}

func (x *HistogramValue) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HistogramValue) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *HistogramValue) GetBuckets() []*HistogramValue_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

// The start_timestamp only applies to the count and sum in the SummaryValue.
type SummaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_time_unixnano is the time when the cumulative value was reset to zero.
	//
	// The cumulative value is over the time interval (start_time_unixnano, timestamp_unixnano].
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	//
	// Value of 0 indicates that the timestamp is unspecified. In that case the timestamp
	// may be decided by the backend.
	StartTimeUnixnano uint64 `protobuf:"fixed64,1,opt,name=start_time_unixnano,json=startTimeUnixnano,proto3" json:"start_time_unixnano,omitempty"`
	// timestamp_unixnano is the moment when this value was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,2,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// The total number of recorded values since start_time. Optional since
	// some systems don't expose this.
	Count uint64 `protobuf:"fixed64,3,opt,name=count,proto3" json:"count,omitempty"`
	// The total sum of recorded values since start_time. Optional since some
	// systems don't expose this. If count is zero then this field must be zero.
	Sum float64 `protobuf:"fixed64,4,opt,name=sum,proto3" json:"sum,omitempty"`
	// A list of values at different percentiles of the distribution calculated
	// from the current snapshot. The percentiles must be strictly increasing.
	PercentileValues []*SummaryValue_ValueAtPercentile `protobuf:"bytes,5,rep,name=percentile_values,json=percentileValues,proto3" json:"percentile_values,omitempty"`
}

func (x *SummaryValue) Reset() {
	*x = SummaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryValue) ProtoMessage() {}

func (x *SummaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryValue.ProtoReflect.Descriptor instead.
func (*SummaryValue) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{9}
}

func (x *SummaryValue) GetStartTimeUnixnano() uint64 {
	if x != nil {
		return x.StartTimeUnixnano
	}
	return 0
}

func (x *SummaryValue) GetTimestampUnixnano() uint64 {
	if x != nil {
		return x.TimestampUnixnano
	}
	return 0
}

func (x *SummaryValue) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SummaryValue) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *SummaryValue) GetPercentileValues() []*SummaryValue_ValueAtPercentile {
	if x != nil {
		return x.PercentileValues
	}
	return nil
}

// ExplicitBounds specifies buckets with explicitly defined bounds for values.
type HistogramDataPoint_ExplicitBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing and > 0.
	//
	// Note: only [a, b) intervals are currently supported for each bucket. If we decides
	// to also support (a, b] intervals we should add support for these by defining a boolean
	// value which decides what type of intervals to use.
	Bounds []float64 `protobuf:"fixed64,1,rep,packed,name=bounds,proto3" json:"bounds,omitempty"`
}

func (x *HistogramDataPoint_ExplicitBounds) Reset() {
	*x = HistogramDataPoint_ExplicitBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramDataPoint_ExplicitBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramDataPoint_ExplicitBounds) ProtoMessage() {}

func (x *HistogramDataPoint_ExplicitBounds) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramDataPoint_ExplicitBounds.ProtoReflect.Descriptor instead.
func (*HistogramDataPoint_ExplicitBounds) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{4, 0}
}

func (x *HistogramDataPoint_ExplicitBounds) GetBounds() []float64 {
	if x != nil {
		return x.Bounds
	}
	return nil
}

// Bucket contains values for a bucket.
type HistogramValue_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of values in each bucket of the histogram, as described by
	// bucket_options.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// exemplar is an optional representative value of the bucket.
	Exemplar *HistogramValue_Bucket_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
}

func (x *HistogramValue_Bucket) Reset() {
	*x = HistogramValue_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramValue_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramValue_Bucket) ProtoMessage() {}

func (x *HistogramValue_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramValue_Bucket.ProtoReflect.Descriptor instead.
func (*HistogramValue_Bucket) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{8, 0}
}

func (x *HistogramValue_Bucket) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HistogramValue_Bucket) GetExemplar() *HistogramValue_Bucket_Exemplar {
	if x != nil {
		return x.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Histogram values. They are metadata that gives information about a
// particular value added to a Histogram bucket.
type HistogramValue_Bucket_Exemplar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the exemplar point. It determines which bucket the exemplar belongs to.
	// If bucket_options define bounds for this bucket then this value must be within
	// the defined bounds.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// timestamp_unixnano is the moment when this exemplar was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimestampUnixnano uint64 `protobuf:"fixed64,2,opt,name=timestamp_unixnano,json=timestampUnixnano,proto3" json:"timestamp_unixnano,omitempty"`
	// exemplar_attachments are contextual information about the example value.
	// Keys in this list must be unique.
	Attachments []*v1.StringKeyValue `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *HistogramValue_Bucket_Exemplar) Reset() {
	*x = HistogramValue_Bucket_Exemplar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramValue_Bucket_Exemplar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramValue_Bucket_Exemplar) ProtoMessage() {}

func (x *HistogramValue_Bucket_Exemplar) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramValue_Bucket_Exemplar.ProtoReflect.Descriptor instead.
func (*HistogramValue_Bucket_Exemplar) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *HistogramValue_Bucket_Exemplar) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HistogramValue_Bucket_Exemplar) GetTimestampUnixnano() uint64 {
	if x != nil {
		return x.TimestampUnixnano
	}
	return 0
}

func (x *HistogramValue_Bucket_Exemplar) GetAttachments() []*v1.StringKeyValue {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// Represents the value at a given percentile of a distribution.
type SummaryValue_ValueAtPercentile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentile of a distribution. Must be in the interval
	// (0.0, 100.0].
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value at the given percentile of a distribution.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SummaryValue_ValueAtPercentile) Reset() {
	*x = SummaryValue_ValueAtPercentile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryValue_ValueAtPercentile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryValue_ValueAtPercentile) ProtoMessage() {}

func (x *SummaryValue_ValueAtPercentile) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryValue_ValueAtPercentile.ProtoReflect.Descriptor instead.
func (*SummaryValue_ValueAtPercentile) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SummaryValue_ValueAtPercentile) GetPercentile() float64 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *SummaryValue_ValueAtPercentile) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_dynatrace_odin_proto_metrics_v1_metrics_proto protoreflect.FileDescriptor

var file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x2b, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x03,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x5e, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f,
	0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x12, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xe7, 0x02,
	0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x64, 0x79, 0x6e,
	0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x41, 0x55, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x55, 0x47, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x07, 0x22, 0x76, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x78, 0x0a, 0x0f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x12, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f,
	0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x28, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x22, 0x7a, 0x0a, 0x10, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e,
	0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x2d, 0x0a, 0x12,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e,
	0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x04, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d,
	0x12, 0x50, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x1a, 0x9f, 0x02, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x78,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x52, 0x08, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72,
	0x1a, 0xa1, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x6e, 0x61,
	0x6e, 0x6f, 0x12, 0x50, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78,
	0x6e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x6c, 0x0a, 0x11,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x11, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8d, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2d, 0x6f, 0x73, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x67,
	0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x6f, 0x64, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescOnce sync.Once
	file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescData = file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDesc
)

func file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescGZIP() []byte {
	file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescOnce.Do(func() {
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescData)
	})
	return file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDescData
}

var file_dynatrace_odin_proto_metrics_v1_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_dynatrace_odin_proto_metrics_v1_metrics_proto_goTypes = []interface{}{
	(MetricDescriptor_Type)(0),                // 0: dynatrace.odin.proto.metrics.v1.MetricDescriptor.Type
	(*Metric)(nil),                            // 1: dynatrace.odin.proto.metrics.v1.Metric
	(*MetricDescriptor)(nil),                  // 2: dynatrace.odin.proto.metrics.v1.MetricDescriptor
	(*Int64DataPoint)(nil),                    // 3: dynatrace.odin.proto.metrics.v1.Int64DataPoint
	(*DoubleDataPoint)(nil),                   // 4: dynatrace.odin.proto.metrics.v1.DoubleDataPoint
	(*HistogramDataPoint)(nil),                // 5: dynatrace.odin.proto.metrics.v1.HistogramDataPoint
	(*SummaryDataPoint)(nil),                  // 6: dynatrace.odin.proto.metrics.v1.SummaryDataPoint
	(*Int64Value)(nil),                        // 7: dynatrace.odin.proto.metrics.v1.Int64Value
	(*DoubleValue)(nil),                       // 8: dynatrace.odin.proto.metrics.v1.DoubleValue
	(*HistogramValue)(nil),                    // 9: dynatrace.odin.proto.metrics.v1.HistogramValue
	(*SummaryValue)(nil),                      // 10: dynatrace.odin.proto.metrics.v1.SummaryValue
	(*HistogramDataPoint_ExplicitBounds)(nil), // 11: dynatrace.odin.proto.metrics.v1.HistogramDataPoint.ExplicitBounds
	(*HistogramValue_Bucket)(nil),             // 12: dynatrace.odin.proto.metrics.v1.HistogramValue.Bucket
	(*HistogramValue_Bucket_Exemplar)(nil),    // 13: dynatrace.odin.proto.metrics.v1.HistogramValue.Bucket.Exemplar
	(*SummaryValue_ValueAtPercentile)(nil),    // 14: dynatrace.odin.proto.metrics.v1.SummaryValue.ValueAtPercentile
	(*v1.StringKeyValue)(nil),                 // 15: dynatrace.odin.proto.common.v1.StringKeyValue
}
var file_dynatrace_odin_proto_metrics_v1_metrics_proto_depIdxs = []int32{
	2,  // 0: dynatrace.odin.proto.metrics.v1.Metric.metric_descriptor:type_name -> dynatrace.odin.proto.metrics.v1.MetricDescriptor
	3,  // 1: dynatrace.odin.proto.metrics.v1.Metric.int64_datapoints:type_name -> dynatrace.odin.proto.metrics.v1.Int64DataPoint
	4,  // 2: dynatrace.odin.proto.metrics.v1.Metric.double_datapoints:type_name -> dynatrace.odin.proto.metrics.v1.DoubleDataPoint
	5,  // 3: dynatrace.odin.proto.metrics.v1.Metric.histogram_datapoints:type_name -> dynatrace.odin.proto.metrics.v1.HistogramDataPoint
	6,  // 4: dynatrace.odin.proto.metrics.v1.Metric.summary_datapoints:type_name -> dynatrace.odin.proto.metrics.v1.SummaryDataPoint
	0,  // 5: dynatrace.odin.proto.metrics.v1.MetricDescriptor.type:type_name -> dynatrace.odin.proto.metrics.v1.MetricDescriptor.Type
	7,  // 6: dynatrace.odin.proto.metrics.v1.Int64DataPoint.value:type_name -> dynatrace.odin.proto.metrics.v1.Int64Value
	8,  // 7: dynatrace.odin.proto.metrics.v1.DoubleDataPoint.value:type_name -> dynatrace.odin.proto.metrics.v1.DoubleValue
	9,  // 8: dynatrace.odin.proto.metrics.v1.HistogramDataPoint.value:type_name -> dynatrace.odin.proto.metrics.v1.HistogramValue
	11, // 9: dynatrace.odin.proto.metrics.v1.HistogramDataPoint.explicit_bounds:type_name -> dynatrace.odin.proto.metrics.v1.HistogramDataPoint.ExplicitBounds
	10, // 10: dynatrace.odin.proto.metrics.v1.SummaryDataPoint.value:type_name -> dynatrace.odin.proto.metrics.v1.SummaryValue
	12, // 11: dynatrace.odin.proto.metrics.v1.HistogramValue.buckets:type_name -> dynatrace.odin.proto.metrics.v1.HistogramValue.Bucket
	14, // 12: dynatrace.odin.proto.metrics.v1.SummaryValue.percentile_values:type_name -> dynatrace.odin.proto.metrics.v1.SummaryValue.ValueAtPercentile
	13, // 13: dynatrace.odin.proto.metrics.v1.HistogramValue.Bucket.exemplar:type_name -> dynatrace.odin.proto.metrics.v1.HistogramValue.Bucket.Exemplar
	15, // 14: dynatrace.odin.proto.metrics.v1.HistogramValue.Bucket.Exemplar.attachments:type_name -> dynatrace.odin.proto.common.v1.StringKeyValue
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_dynatrace_odin_proto_metrics_v1_metrics_proto_init() }
func file_dynatrace_odin_proto_metrics_v1_metrics_proto_init() {
	if File_dynatrace_odin_proto_metrics_v1_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramDataPoint_ExplicitBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramValue_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramValue_Bucket_Exemplar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryValue_ValueAtPercentile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dynatrace_odin_proto_metrics_v1_metrics_proto_goTypes,
		DependencyIndexes: file_dynatrace_odin_proto_metrics_v1_metrics_proto_depIdxs,
		EnumInfos:         file_dynatrace_odin_proto_metrics_v1_metrics_proto_enumTypes,
		MessageInfos:      file_dynatrace_odin_proto_metrics_v1_metrics_proto_msgTypes,
	}.Build()
	File_dynatrace_odin_proto_metrics_v1_metrics_proto = out.File
	file_dynatrace_odin_proto_metrics_v1_metrics_proto_rawDesc = nil
	file_dynatrace_odin_proto_metrics_v1_metrics_proto_goTypes = nil
	file_dynatrace_odin_proto_metrics_v1_metrics_proto_depIdxs = nil
}
