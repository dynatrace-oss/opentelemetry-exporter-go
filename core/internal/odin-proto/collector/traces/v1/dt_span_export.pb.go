// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: dynatrace/odin/proto/collector/trace/v1/dt_span_export.proto

package v1

import (
	v1 "github.com/dynatrace-oss/opentelemetry-exporter-go/core/internal/odin-proto/trace/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This message is sent from Agent to ActiveGate.
// ActiveGate shall use data from this message for routing to cluster and forward
// the contained serialized messages as is without decoding.
// It is sent via an HTTP POST request to endpoint "/odin/v1/spans"
// using Content-Type "application/x-dt-span-export".
type SpanExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the tenant to which the spans belong.
	// Everyone that handles these envelopes MUST check that the sender is
	// authorized to submit data for that tenant.
	TenantUUID string `protobuf:"bytes,1,opt,name=tenantUUID,proto3" json:"tenantUUID,omitempty"`
	// An unique id representing an Agent.
	// Active gate must forward it to cluster
	AgentId int64 `protobuf:"varint,2,opt,name=agentId,proto3" json:"agentId,omitempty"`
	// Serialized dynatrace.odin.proto.collector.common.v1.ExportMetaInfo message.
	// ActiveGate can forward this message to server without decoding.
	ExportMetaInfo []byte `protobuf:"bytes,3,opt,name=exportMetaInfo,proto3" json:"exportMetaInfo,omitempty"`
	// Serialized dynatrace.odin.proto.resource.v1.Resource message.
	// ActiveGate can forward this message to server without decoding.
	Resource []byte `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// An array of span envelopes to be routed by ActiveGate to servers.
	Spans []*ActiveGateSpanEnvelope `protobuf:"bytes,5,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *SpanExport) Reset() {
	*x = SpanExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanExport) ProtoMessage() {}

func (x *SpanExport) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanExport.ProtoReflect.Descriptor instead.
func (*SpanExport) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescGZIP(), []int{0}
}

func (x *SpanExport) GetTenantUUID() string {
	if x != nil {
		return x.TenantUUID
	}
	return ""
}

func (x *SpanExport) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SpanExport) GetExportMetaInfo() []byte {
	if x != nil {
		return x.ExportMetaInfo
	}
	return nil
}

func (x *SpanExport) GetResource() []byte {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *SpanExport) GetSpans() []*ActiveGateSpanEnvelope {
	if x != nil {
		return x.Spans
	}
	return nil
}

// This message holds span data to be routed to a specific server by ActiveGate.
// It holds information needed by ActiveGate for routing plus serialized
// data to be forwarded without decoding.
type ActiveGateSpanEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DestinationKey:
	//	*ActiveGateSpanEnvelope_TraceId
	//	*ActiveGateSpanEnvelope_ServerId
	DestinationKey isActiveGateSpanEnvelope_DestinationKey `protobuf_oneof:"destinationKey"`
	// Serialized ClusterSpanEnvelope message.
	// ActiveGate can forward this message to server without decoding.
	ClusterSpanEnvelope []byte `protobuf:"bytes,3,opt,name=clusterSpanEnvelope,proto3" json:"clusterSpanEnvelope,omitempty"`
}

func (x *ActiveGateSpanEnvelope) Reset() {
	*x = ActiveGateSpanEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveGateSpanEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveGateSpanEnvelope) ProtoMessage() {}

func (x *ActiveGateSpanEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveGateSpanEnvelope.ProtoReflect.Descriptor instead.
func (*ActiveGateSpanEnvelope) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescGZIP(), []int{1}
}

func (m *ActiveGateSpanEnvelope) GetDestinationKey() isActiveGateSpanEnvelope_DestinationKey {
	if m != nil {
		return m.DestinationKey
	}
	return nil
}

func (x *ActiveGateSpanEnvelope) GetTraceId() []byte {
	if x, ok := x.GetDestinationKey().(*ActiveGateSpanEnvelope_TraceId); ok {
		return x.TraceId
	}
	return nil
}

func (x *ActiveGateSpanEnvelope) GetServerId() int64 {
	if x, ok := x.GetDestinationKey().(*ActiveGateSpanEnvelope_ServerId); ok {
		return x.ServerId
	}
	return 0
}

func (x *ActiveGateSpanEnvelope) GetClusterSpanEnvelope() []byte {
	if x != nil {
		return x.ClusterSpanEnvelope
	}
	return nil
}

type isActiveGateSpanEnvelope_DestinationKey interface {
	isActiveGateSpanEnvelope_DestinationKey()
}

type ActiveGateSpanEnvelope_TraceId struct {
	// TraceId is used if agent doesn't know the serverId (exactly 16 bytes).
	// ActiveGate sends data to server with id = CONSISTENT_HASH_FUNC(traceId).
	TraceId []byte `protobuf:"bytes,1,opt,name=traceId,proto3,oneof"`
}

type ActiveGateSpanEnvelope_ServerId struct {
	// Identifies the target server.
	// if positive, send data to server with serverId.
	// if negative, send data to server with id = CONSISTENT_HASH_FUNC(serverId).
	ServerId int64 `protobuf:"varint,2,opt,name=serverId,proto3,oneof"`
}

func (*ActiveGateSpanEnvelope_TraceId) isActiveGateSpanEnvelope_DestinationKey() {}

func (*ActiveGateSpanEnvelope_ServerId) isActiveGateSpanEnvelope_DestinationKey() {}

// This message holds span data for routing on cluster.
// It holds information needed by cluster for routing plus serialized
// span data to be forwarded between servers without decoding.
type ClusterSpanEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The traceId for contained spans (exactly 16 bytes).
	TraceId []byte `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	// The pathInfo field as received via a FW4 tag/TraceState or generated according to spec.
	PathInfo int32 `protobuf:"varint,2,opt,name=pathInfo,proto3" json:"pathInfo,omitempty"`
	// Custom Tags related to this spans.
	CustomTags []*v1.CustomTag `protobuf:"bytes,3,rep,name=customTags,proto3" json:"customTags,omitempty"`
	// Serialized SpanContainer message holding spans matching to above routing data.
	// Server can forward this message without decoding
	SpanContainer []byte `protobuf:"bytes,4,opt,name=spanContainer,proto3" json:"spanContainer,omitempty"`
}

func (x *ClusterSpanEnvelope) Reset() {
	*x = ClusterSpanEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSpanEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSpanEnvelope) ProtoMessage() {}

func (x *ClusterSpanEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSpanEnvelope.ProtoReflect.Descriptor instead.
func (*ClusterSpanEnvelope) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterSpanEnvelope) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *ClusterSpanEnvelope) GetPathInfo() int32 {
	if x != nil {
		return x.PathInfo
	}
	return 0
}

func (x *ClusterSpanEnvelope) GetCustomTags() []*v1.CustomTag {
	if x != nil {
		return x.CustomTags
	}
	return nil
}

func (x *ClusterSpanEnvelope) GetSpanContainer() []byte {
	if x != nil {
		return x.SpanContainer
	}
	return nil
}

// Container holding Spans.
// A dedicated message is used to allow serialisation of spans for
// efficient forwarding.
type SpanContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spans []*v1.Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *SpanContainer) Reset() {
	*x = SpanContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanContainer) ProtoMessage() {}

func (x *SpanContainer) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanContainer.ProtoReflect.Descriptor instead.
func (*SpanContainer) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescGZIP(), []int{3}
}

func (x *SpanContainer) GetSpans() []*v1.Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

// This message is used by ActiveGate to export agent span data to server.
// ActiveGate just fills agentId and the byte arrays received from agent
// without decoding/encoding them.
type ClusterExportEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An unique id representing an Agent.
	AgentId int64 `protobuf:"varint,1,opt,name=agentId,proto3" json:"agentId,omitempty"`
	// Serialized dynatrace.odin.proto.collector.common.v1.ExportMetaInfo message.
	// ActiveGate can forward this message to server without decoding.
	ExportMetaInfo []byte `protobuf:"bytes,2,opt,name=exportMetaInfo,proto3" json:"exportMetaInfo,omitempty"`
	// Serialized dynatrace.odin.proto.resource.v1.Resource message.
	// ActiveGate can forward this message to server without decoding.
	Resource []byte `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// Serialized ClusterSpanEnvelope messages
	SpanEnvelope [][]byte `protobuf:"bytes,4,rep,name=spanEnvelope,proto3" json:"spanEnvelope,omitempty"`
}

func (x *ClusterExportEnvelope) Reset() {
	*x = ClusterExportEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterExportEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterExportEnvelope) ProtoMessage() {}

func (x *ClusterExportEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterExportEnvelope.ProtoReflect.Descriptor instead.
func (*ClusterExportEnvelope) Descriptor() ([]byte, []int) {
	return file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterExportEnvelope) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *ClusterExportEnvelope) GetExportMetaInfo() []byte {
	if x != nil {
		return x.ExportMetaInfo
	}
	return nil
}

func (x *ClusterExportEnvelope) GetResource() []byte {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ClusterExportEnvelope) GetSpanEnvelope() [][]byte {
	if x != nil {
		return x.SpanEnvelope
	}
	return nil
}

var File_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto protoreflect.FileDescriptor

var file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27,
	0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2f, 0x6f, 0x64, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22,
	0xbb, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x73, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x4a, 0x0a,
	0x0d, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x9c, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x64, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x44, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5a, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x79, 0x6e, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x6f, 0x73, 0x73, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2d, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6f, 0x64, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescOnce sync.Once
	file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescData = file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDesc
)

func file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescGZIP() []byte {
	file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescOnce.Do(func() {
		file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescData = protoimpl.X.CompressGZIP(file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescData)
	})
	return file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDescData
}

var file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_goTypes = []interface{}{
	(*SpanExport)(nil),             // 0: dynatrace.odin.proto.collector.trace.v1.SpanExport
	(*ActiveGateSpanEnvelope)(nil), // 1: dynatrace.odin.proto.collector.trace.v1.ActiveGateSpanEnvelope
	(*ClusterSpanEnvelope)(nil),    // 2: dynatrace.odin.proto.collector.trace.v1.ClusterSpanEnvelope
	(*SpanContainer)(nil),          // 3: dynatrace.odin.proto.collector.trace.v1.SpanContainer
	(*ClusterExportEnvelope)(nil),  // 4: dynatrace.odin.proto.collector.trace.v1.ClusterExportEnvelope
	(*v1.CustomTag)(nil),           // 5: dynatrace.odin.proto.trace.v1.CustomTag
	(*v1.Span)(nil),                // 6: dynatrace.odin.proto.trace.v1.Span
}
var file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_depIdxs = []int32{
	1, // 0: dynatrace.odin.proto.collector.trace.v1.SpanExport.spans:type_name -> dynatrace.odin.proto.collector.trace.v1.ActiveGateSpanEnvelope
	5, // 1: dynatrace.odin.proto.collector.trace.v1.ClusterSpanEnvelope.customTags:type_name -> dynatrace.odin.proto.trace.v1.CustomTag
	6, // 2: dynatrace.odin.proto.collector.trace.v1.SpanContainer.spans:type_name -> dynatrace.odin.proto.trace.v1.Span
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_init() }
func file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_init() {
	if File_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveGateSpanEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterSpanEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterExportEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ActiveGateSpanEnvelope_TraceId)(nil),
		(*ActiveGateSpanEnvelope_ServerId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_goTypes,
		DependencyIndexes: file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_depIdxs,
		MessageInfos:      file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_msgTypes,
	}.Build()
	File_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto = out.File
	file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_rawDesc = nil
	file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_goTypes = nil
	file_dynatrace_odin_proto_collector_trace_v1_dt_span_export_proto_depIdxs = nil
}
